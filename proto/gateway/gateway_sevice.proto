syntax = "proto3";
package gateway;
option go_package = "github.com/chingkamhing/grpc-gateway/lib/tm2-proto-gateway-go;tm2_proto_gateway_go";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "gateway/gateway_rr.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "gRPC Gateway Testing Project";
		version: "0.1.0";
		contact: {
			name: "github.com/TMGaminghk/grpc-gateway";
			url: "https://www.tmgaming.page/";
			email: "kam.dev@tmgaming.page";
        };
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "bearer"
            value: {
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
                name: "Authorization"
                type: TYPE_API_KEY
                in: IN_HEADER
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }
};

// Gateway service
service Gateway {
    // User login
    rpc Login (LoginRequest) returns (LoginReply) {
        option (google.api.http) = {
            post: "/v1/account/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {}
        };
    }
    // User logout
    rpc Logout (LogoutRequest) returns (LogoutReply) {
        option (google.api.http) = {
            post: "/v1/account/logout"
            body: "*"
        };
    }
    // Create user
    rpc CreateUser (CreateUserRequest) returns (CreateUserReply) {
        option (google.api.http) = {
            post: "/v1/user"
            body: "*"
        };
    }
    // List user
    rpc ListUser (ListUserRequest) returns (ListUserReply) {
        option (google.api.http) = {
            get: "/v1/user"
        };
    }
    // Get user
    rpc GetUser (GetUserRequest) returns (GetUserReply) {
        option (google.api.http) = {
            get: "/v1/user/{id}"
        };
    }
    // Update user
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply) {
        option (google.api.http) = {
            put: "/v1/user"
            body: "*"
        };
    }
    // Delete user
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply) {
        option (google.api.http) = {
            delete: "/v1/user/{id}"
        };
    }
}
